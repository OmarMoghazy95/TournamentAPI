// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tournament.Api.Infrastructure.Context;

#nullable disable

namespace Tournament.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Tournament.Api.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MatchAId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MatchBId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TeamAId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamBId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchAId")
                        .IsUnique();

                    b.HasIndex("MatchBId")
                        .IsUnique();

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerId");

                    b.ToTable("TournamentMatch");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentTeam");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentMatch", b =>
                {
                    b.HasOne("Tournament.Api.Core.Entities.TournamentMatch", "ParentMatchA")
                        .WithOne("ChildMatchA")
                        .HasForeignKey("Tournament.Api.Core.Entities.TournamentMatch", "MatchAId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Tournament.Api.Core.Entities.TournamentMatch", "ParentMatchB")
                        .WithOne("ChildMatchB")
                        .HasForeignKey("Tournament.Api.Core.Entities.TournamentMatch", "MatchBId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Tournament.Api.Core.Entities.TournamentTeam", "TeamA")
                        .WithMany("MatchesA")
                        .HasForeignKey("TeamAId");

                    b.HasOne("Tournament.Api.Core.Entities.TournamentTeam", "TeamB")
                        .WithMany("MatchesB")
                        .HasForeignKey("TeamBId");

                    b.HasOne("Tournament.Api.Core.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tournament.Api.Core.Entities.TournamentTeam", "Winner")
                        .WithMany("MatchesWon")
                        .HasForeignKey("WinnerId");

                    b.Navigation("ParentMatchA");

                    b.Navigation("ParentMatchB");

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("Tournament");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentTeam", b =>
                {
                    b.HasOne("Tournament.Api.Core.Entities.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentMatch", b =>
                {
                    b.Navigation("ChildMatchA");

                    b.Navigation("ChildMatchB");
                });

            modelBuilder.Entity("Tournament.Api.Core.Entities.TournamentTeam", b =>
                {
                    b.Navigation("MatchesA");

                    b.Navigation("MatchesB");

                    b.Navigation("MatchesWon");
                });
#pragma warning restore 612, 618
        }
    }
}
